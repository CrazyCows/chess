@page "/chessboard"
@using chess.Service
@rendermode InteractiveServer

@inject GameLogicService GameService

<div class="game-info">
    <div class="turn-indicator">
        Current Turn: <span class="turn">@GameService.GetCurrentTurn()</span>
    </div>
    <div class="status-indicator">
        <span class="check-status">
            @if (_isCheck)
            {
                <span>Check!</span>
            }
        </span>
        <span class="checkmate-status">
            @if (_isCheckmate)
            {
                <span>Checkmate!</span>
            }
        </span>
    </div>
    <div class="timer">
        White Time: @FormatTime(_whiteTime) | Black Time: @FormatTime(_blackTime)
    </div>
</div>


<div class="chessboard">
    @if (_isCheckmate)
    {
        <div class="game-controls">
            <button @onclick="RestartGame">Restart Game</button>
        </div>
    }
    

    
    
    @for (int row = 7; row >= 0; row--)
    {
        <div class="row">
            @for (int col = 0; col < 8; col++)
            {
                var piece = GameService.Board.Squares[row, col];
                bool isHighlighted = _validMoves.Any(m => m.x == row && m.y == col);
                string cssClass = "square";
                var currentRow = row; // Capture row
                var currentCol = col; // Capture col
                if (isHighlighted)
                {
                    cssClass += " highlighted";
                }
                else if ((row + col) % 2 == 0)
                {
                    cssClass += " light";
                }
                else
                {
                    cssClass += " dark";
                }

                <div class="@cssClass" @onclick="() => OnSquareClicked(currentRow, currentCol)">
                    @if (piece != null)
                    {
                        <span class="piece">@piece.Symbol</span>
                    }
                </div>
            }
        </div>
    }
</div>

@code {
    private bool _isCheck = false;
    private bool _isCheckmate = false;
    private int _whiteTime;
    private int _blackTime;

    private int? _selectedRow = null;
    private int? _selectedCol = null;
    private List<(int x, int y, bool IsEnemy)> _validMoves = new();
    private static readonly object _lock = new object();

    protected override void OnInitialized()
    {
        GameService.IsCheck += async (checkStatus) =>
        {
            _isCheck = checkStatus;
            await InvokeAsync(StateHasChanged);
        };
        GameService.IsCheckMate += async (checkmateStatus) =>
        {
            _isCheckmate = checkmateStatus;
            await InvokeAsync(StateHasChanged);
        };
        GameService.TimeTaking.OnTimeUpdated += async () =>
        {
            (_whiteTime, _blackTime) = GameService.TimeTaking.GetRemainingTimes();
            await InvokeAsync(StateHasChanged);
        };
        GameService.TimeTaking.OnTimeExpired += async (losingPlayer) =>
        {
            _isCheckmate = true;
            Console.WriteLine($"{losingPlayer} ran out of time. Game Over!");
            await InvokeAsync(StateHasChanged);
        };
        GameService.TurnSwitched += async () =>
        {
            if (_isCheckmate)
            {
                return;
            }
            await Task.Run(() =>
            {
                lock (_lock)
                {
                    GameService.MakeAiMove();
                }
            });
            await InvokeAsync(StateHasChanged);
        };

    }




    private async Task RestartGame()
    {
        GameService.Restart();
        _isCheck = false;
        _isCheckmate = false;
        _selectedRow = null;
        _selectedCol = null;
        _validMoves.Clear();
        GameService.TimeTaking.ResetTimer();
        await InvokeAsync(StateHasChanged);
    }

    private void OnSquareClicked(int row, int col)
    {
        Console.WriteLine($"square clicked: ({row}, {col})");
        var piece = GameService.Board.Squares[row, col];

        if (_selectedRow == null)
        {
            if (piece != null && piece.Color == GameService.GetCurrentTurn())
            {
                _selectedRow = row;
                _selectedCol = col;
                var moves = GameService.GetValidMoves(row, col);
                _validMoves = moves ?? new();
            }
        }
        else
        {
            if (_validMoves.Any(m => m.x == row && m.y == col))
            {
                GameService.MakeMove(_selectedRow.Value, _selectedCol.Value, row, col);
            }
            _selectedRow = null;
            _selectedCol = null;
            _validMoves.Clear();
        }
    }

    private string FormatTime(int timeInSeconds)
    {
        int minutes = timeInSeconds / 60;
        int seconds = timeInSeconds % 60;
        return $"{minutes:D2}:{seconds:D2}";
    }
    

}


<style>
    .game-info {
    margin-bottom: 10px;
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.turn-indicator {
    font-size: 18px;
}

.status-indicator {
    font-size: 18px;
}

.check-status, .checkmate-status {
    margin-right: 10px;
    font-weight: bold;
    color: red;
}

.timer {
    font-size: 16px;
}

.chessboard {
    position: relative;
    display: inline-block;
    border: 2px solid black;
}

.row {
    display: flex;
}

.square {
    width: 60px;
    height: 60px;
    display: flex;
    align-items: center;
    justify-content: center;
}

.light {
    background-color: #f0d9b5;
}

.dark {
    background-color: #b58863;
}

.highlighted {
    background-color: yellow;
}

.piece {
    font-size: 40px;
}



.game-controls {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    z-index: 10;
    display: none; /* Initially hidden */
}

.game-controls button {
    padding: 10px 20px;
    font-size: 16px;
    border: none;
    border-radius: 5px;
    background-color: #4CAF50;
    color: white;
    cursor: pointer;
}

.game-controls button:hover {
    background-color: #45a049;
}

/* Display the controls only when the game ends */
.chessboard .game-controls {
    display: block;
}


</style>